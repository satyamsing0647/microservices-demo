package com.coforge.training.shopstop.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.coforge.training.shopstop.model.Order;
import com.coforge.training.shopstop.model.Product;
import com.coforge.training.shopstop.service.OrderService;
import com.coforge.training.shopstop.service.ProductClient;

/*
* Date   : 29 Nov 2024
* Time   : 3:31:44â€¯pm
* Author : Satyam.3.Singh 
* Project: order-service
*/

@RestController
@RequestMapping("/api")
public class OrderController {
	
	@Autowired
	private OrderService orderService;
	
	//inject instance of feign client
	
	@Autowired
	private ProductClient productClient;
	
	@GetMapping("/orders/products")
	public ResponseEntity<List<Product>> getAll(){
		ResponseEntity<List<Product>> products=productClient.getAllProducts();
		
		if(products.getStatusCode() == HttpStatus.OK) {
			List<Product> p =products.getBody();
			return ResponseEntity.ok(p);
		}
		
		else {
			return ResponseEntity.status(products.getStatusCode()).body(null);
		}
	}
	
	@PostMapping("/orders")
	public ResponseEntity<Order> createOrder(@RequestBody Order myOrder){
		try {
			//Inter Services communication . using feign client we call getProductById() of product-service
			ResponseEntity<Product> product = productClient.getProductById(myOrder.getProductId());
			//system.out.println("Hello"+product.toString());
			if( product.getStatusCode() == HttpStatus.OK) {
				Product p=product.getBody();
				
			if (p == null) {
				
				return ResponseEntity.notFound().build();
			}
			
			//System.out.println("Hello"+p.toString());
			myOrder.setTotalPrice(p.getPrice() * myOrder.getQuantity());
			Order savedOrder = orderService.saveOrder(myOrder);
			return ResponseEntity.status(HttpStatus.CREATED).body(savedOrder);
		}
		else {
			return ResponseEntity.status(product.getStatusCode()).build();
		}
	}
		catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
}

@GetMapping("/orders")
	public ResponseEntity<List<Order>> getAllOrders() {
	    try {
	        List<Order> orders = orderService.getAllOrders();
	        if (orders.isEmpty()) {
	            return ResponseEntity.noContent().build();
	        }
	        return ResponseEntity.ok(orders);
	    } catch (Exception e) {
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	    }
	}
}
